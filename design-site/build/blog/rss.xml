<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Pipeline UI Blog</title>
        <link>https://pipeline-ui.com/blog</link>
        <description>Pipeline UI Blog</description>
        <lastBuildDate>Tue, 28 May 2019 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <item>
            <title><![CDATA[Solving Server Side Render Issues]]></title>
            <link>https://pipeline-ui.com/blog/ssr</link>
            <guid>ssr</guid>
            <pubDate>Tue, 28 May 2019 00:00:00 GMT</pubDate>
            <description><![CDATA[Server side build failure is a fairly common and frustrating issue that is encountered when generating documentation sites with tools like Docusaurus. SSR issues typically arise when code that functioned flawlessly in a client-side React app is incorporated on a doc site either as a component or live code block. The problem can typically be traced to dependencies or contexts that the server does not have access to. Often, such issues can be difficult to track down due to the complexities of rollup, babel, webpack, polyfills, transpiling and minifying. Fortunately, two simple bypasses can resolve the majority of such problems.]]></description>
            <content:encoded><![CDATA[<p>Server side build failure is a fairly common and frustrating issue that is encountered when generating documentation sites with tools like Docusaurus. SSR issues typically arise when code that functioned flawlessly in a client-side React app is incorporated on a doc site either as a component or live code block. The problem can typically be traced to dependencies or contexts that the server does not have access to. Often, such issues can be difficult to track down due to the complexities of rollup, babel, webpack, polyfills, transpiling and minifying. Fortunately, two simple bypasses can resolve the majority of such problems. </p><p>The first is simply embedding a codesandbox iFrame, which is particulary advised for complex code that uses state, nodejs libraries like crypto. Link a github repository (or subfolder) via <a href="https://codesandbox.io/s/github">https://codesandbox.io/s/github</a>. After opening the sandbox, click the embed button on the upper right side of the window.  </p><p>The second is to use a plugin like BrowserOnly in conjunction with using <code>require()</code> instead of <code>import</code>. </p><p>All code below goes into a .mdx file. The function <code>BrowserOnlyButton</code> returns both the dependencies and code that depends on them. Note how the dot notation is used with <code>require()</code> to specify particular components. Finally, the component can be used in the mdx file simply by adding the jsx tag corresponding to the wrapping function.</p><pre><code class="language-jsx">import BrowserOnly from &#x27;@docusaurus/BrowserOnly&#x27;;

export function BrowserOnlyButton() {
  return (
    &lt;BrowserOnly fallback={&lt;p&gt;Some Fallback Content&lt;/p&gt;}&gt;
      {() =&gt; {
const AlgoButton = require(&#x27;pipeline-ui&#x27;).AlgoButton; const Pipeline = require(&#x27;pipeline-ui&#x27;).Pipeline; return &lt;AlgoButton wallet={Pipeline.init()} /&gt;      }}
    &lt;/BrowserOnly&gt;
  );
}

&lt;BrowserOnlyButton /&gt;
</code></pre>]]></content:encoded>
        </item>
    </channel>
</rss>