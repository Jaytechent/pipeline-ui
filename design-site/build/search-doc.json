[{"title":"Solving Server Side Render Issues","type":0,"sectionRef":"#","url":"blog/ssr","content":"Server side build failure is a fairly common and frustrating issue that is encountered when generating documentation sites with tools like Docusaurus. SSR issues typically arise when code that functioned flawlessly in a client-side React app is incorporated on a doc site either as a component or live code block. The problem can typically be traced to dependencies or contexts that the server does not have access to. Often, such issues can be difficult to track down due to the complexities of rollup, babel, webpack, polyfills, transpiling and minifying. Fortunately, two simple bypasses can resolve the majority of such problems. The first is simply embedding a codesandbox iFrame, which is particulary advised for complex code that uses state, nodejs libraries like crypto. Link a github repository (or subfolder) via https://codesandbox.io/s/github. After opening the sandbox, click the embed button on the upper right side of the window. The second is to use a plugin like BrowserOnly in conjunction with using require() instead of import. All code below goes into a .mdx file. The function BrowserOnlyButton returns both the dependencies and code that depends on them. Note how the dot notation is used with require() to specify particular components. Finally, the component can be used in the mdx file simply by adding the jsx tag corresponding to the wrapping function. import BrowserOnly from '@docusaurus/BrowserOnly'; export function BrowserOnlyButton() { return ( <BrowserOnly fallback={<p>Some Fallback Content</p>}> {() => {const AlgoButton = require('pipeline-ui').AlgoButton; const Pipeline = require('pipeline-ui').Pipeline; return <AlgoButton wallet={Pipeline.init()} /> }} </BrowserOnly> );} <BrowserOnlyButton /> Copy","keywords":""},{"title":"Code-Lite: Our Philosophy","type":0,"sectionRef":"#","url":"docs/About/philosophy","content":"","keywords":""},{"title":"Crypto's last mile","type":1,"pageTitle":"Code-Lite: Our Philosophy","url":"docs/About/philosophy##","content":" Over the past few years, cryptocurrency has exploded into the public consciousness with thousands of blockchains and intense speculation. However, it has not seen widespread adoption for everyday transactions, in part due to the steep learning curve required to integrate it into websites and apps. "},{"title":"The on-ramp dillemna","type":1,"pageTitle":"Code-Lite: Our Philosophy","url":"docs/About/philosophy##","content":"While third-party solutions exist, these often negate one of the most attractive features of blockchain - the ability to create and execute transactions without revealing personal details.  "},{"title":"PIPELINE's Code-Lite solution","type":1,"pageTitle":"Code-Lite: Our Philosophy","url":"docs/About/philosophy##","content":"Fetching address details, assembling, signing and sending transactions and parsing asynchronous results can require hundreds of lines of code - a daunting challenge for those with little or no coding experience. We spend hundreds of hours scouring code libraries, tracking down errors and broken dependencies and bundling the complexity of blockchain into neat, reusable and easy-to-use packages. Our mission is to contribute to the widespread adoption of blockchain by making it as simple as pasting a small block of code to create a PayPal \"Buy now\" button. "},{"title":"Contact Us","type":0,"sectionRef":"#","url":"docs/About/contact","content":"","keywords":""},{"title":"Get in touch with PIPELINE-UI","type":1,"pageTitle":"Contact Us","url":"docs/About/contact#get-in-touch-with-pipeline-ui","content":"First name* Last name* Email address* Company name (optional) Website or social handle (optional) Reason to contact Introduction Partnership opportunity Investment enquiry Enquiry detail* Submit "},{"title":"AlgoAddress","type":0,"sectionRef":"#","url":"docs/AlgoComponents/AlgoAddress","content":"","keywords":""},{"title":"Example usage","type":1,"pageTitle":"AlgoAddress","url":"docs/AlgoComponents/AlgoAddress#example-usage","content":"<AlgoAddress address={this.state.myAddress}/> Copy "},{"title":"Props","type":1,"pageTitle":"AlgoAddress","url":"docs/AlgoComponents/AlgoAddress#props","content":"Prop\tType\tDefault\tDescriptionaddress\tstring (required) string value to generate QR code textLabels\tbool (optional)\tfalse\tChanges buttons to text from icons  AlgoAddress uses COMMON, TYPOGRAPHY groups of Styled System props. "},{"title":"AlgoFetch","type":0,"sectionRef":"#","url":"docs/AlgoComponents/AlgoFetch","content":"","keywords":""},{"title":"Usage Example","type":1,"pageTitle":"AlgoFetch","url":"docs/AlgoComponents/AlgoFetch#usage-example","content":"<AlgoFetch address=\"LMKFQIPL3VQCZGGFK4WZ7FPCQWLNBTJQ3UWSTA7D7QZSPJTZQKTDVT7WG4\"/> Copy "},{"title":"Props","type":1,"pageTitle":"AlgoFetch","url":"docs/AlgoComponents/AlgoFetch#props","content":"Prop\tType\tDefault\tDescriptionaddress\tstring  "},{"title":"SwitchNet","type":0,"sectionRef":"#","url":"docs/AlgoComponents/switchnet","content":"","keywords":"mainnet testnet"},{"title":"Example usage","type":1,"pageTitle":"SwitchNet","url":"docs/AlgoComponents/switchnet#example-usage","content":"import { SwitchNet } from 'pipeline-ui'<SwitchNet/> Copy "},{"title":"Code of Conduct","type":0,"sectionRef":"#","url":"docs/About/code-of-conduct","content":"","keywords":""},{"title":"Our Pledge","type":1,"pageTitle":"Code of Conduct","url":"docs/About/code-of-conduct#our-pledge","content":"We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community. "},{"title":"Our Standards","type":1,"pageTitle":"Code of Conduct","url":"docs/About/code-of-conduct#our-standards","content":"Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other peopleBeing respectful of differing opinions, viewpoints, and experiencesGiving and gracefully accepting constructive feedbackAccepting responsibility and apologizing to those affected by our mistakes, and learning from the experienceFocusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kindTrolling, insulting or derogatory comments, and personal or political attacksPublic or private harassmentPublishing others' private information, such as a physical or email address, without their explicit permissionOther conduct which could reasonably be considered inappropriate in a professional setting "},{"title":"Enforcement Responsibilities","type":1,"pageTitle":"Code of Conduct","url":"docs/About/code-of-conduct#enforcement-responsibilities","content":"Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate. "},{"title":"Scope","type":1,"pageTitle":"Code of Conduct","url":"docs/About/code-of-conduct#scope","content":"This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. "},{"title":"Enforcement","type":1,"pageTitle":"Code of Conduct","url":"docs/About/code-of-conduct#enforcement","content":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at [INSERT CONTACT METHOD]. All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident. "},{"title":"Enforcement Guidelines","type":1,"pageTitle":"Code of Conduct","url":"docs/About/code-of-conduct#enforcement-guidelines","content":"Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct: "},{"title":"1. Correction","type":1,"pageTitle":"Code of Conduct","url":"docs/About/code-of-conduct#1-correction","content":"Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested. "},{"title":"2. Warning","type":1,"pageTitle":"Code of Conduct","url":"docs/About/code-of-conduct#2-warning","content":"Community Impact: A violation through a single incident or series of actions. Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban. "},{"title":"3. Temporary Ban","type":1,"pageTitle":"Code of Conduct","url":"docs/About/code-of-conduct#3-temporary-ban","content":"Community Impact: A serious violation of community standards, including sustained inappropriate behavior. Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban. "},{"title":"4. Permanent Ban","type":1,"pageTitle":"Code of Conduct","url":"docs/About/code-of-conduct#4-permanent-ban","content":"Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence: A permanent ban from any sort of public interaction within the community. "},{"title":"Attribution","type":1,"pageTitle":"Code of Conduct","url":"docs/About/code-of-conduct#attribution","content":"This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available athttps://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines were inspired byMozilla's code of conduct enforcement ladder. For answers to common questions about this code of conduct, see the FAQ athttps://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations. "},{"title":"Presentations","type":0,"sectionRef":"#","url":"docs/About/presentation","content":"","keywords":""},{"title":"Milestone 1","type":1,"pageTitle":"Presentations","url":"docs/About/presentation#milestone-1","content":"Covers the conceptualization and implementation of the Pipeline class, Pipeline Express and Pipeline UI libraries. Milestone 1 (PDF) "},{"title":"Avatar","type":0,"sectionRef":"#","url":"docs/Components/Avatar","content":"","keywords":""},{"title":"Usage Example","type":1,"pageTitle":"Avatar","url":"docs/Components/Avatar#usage-example","content":"Live Editor Result "},{"title":"Props","type":1,"pageTitle":"Avatar","url":"docs/Components/Avatar#props","content":"Prop\tType\tDefault\tDescriptionalt\tstring (optional)\t'Avatar'\tSets alt attribute on image for accessibility. bg\tstring (optional)\t'grey'\tSets background color. size\tstring (optional)\t'2rem'\tSets avatar height and width. src\tstring (required) Sets avatar image. theme\tobject (optional) Sets theme.  Avatar also uses COMMON, LAYOUT, POSITION, FLEXBOX, BORDERS groups of Styled System props. "},{"title":"AlgoButton","type":0,"sectionRef":"#","url":"docs/AlgoComponents/AlgoButton","content":"","keywords":""},{"title":"Accessing returned address","type":1,"pageTitle":"AlgoButton","url":"docs/AlgoComponents/AlgoButton#accessing-returned-address","content":"The returned address can be accessed several different ways. Setting the context prop to {this} and the returnTo prop to a state key (as string) will return the address directly to your parent component's state without the need for additional callback or event handler code. The address can also be accessed with Pipeline.address: componentDidMount() { this.interval = setInterval(() => this.setState({address: Pipeline.address}), 1000); } Copy or with an onChange handler: handleChange = (value) =>{ this.setState({myAddress: value}) } render(){ return <AlgoButton onChange={this.handleChange} wallet={myAlgoWallet}/> } Copy "},{"title":"Use Example","type":1,"pageTitle":"AlgoButton","url":"docs/AlgoComponents/AlgoButton#use-example","content":"import React, { Component } from 'react';import { AlgoButton, Pipeline} from 'pipeline-ui'; class TestButton extends Component { constructor(props) { super(props); this.state = { Algaddress: \"\" } } myAlgoWallet = Pipeline.init(); render() { return <div> <AlgoButton wallet={this.myAlgoWallet} context={this} returnTo={\"Algaddress\"} /> <h1>{this.state.Algaddress}</h1> </div> }} export default TestButton; Copy "},{"title":"Props","type":1,"pageTitle":"AlgoButton","url":"docs/AlgoComponents/AlgoButton#props","content":"Prop\tType\tDefault\tDescriptionwallet\treference context\treference returnTo\tstring\tempty string\tkey in state to return fetched address onChange\tfunction enables callback (see example above) "},{"title":"AlgoWCButton","type":0,"sectionRef":"#","url":"docs/AlgoComponents/AlgoWCButton","content":"","keywords":""},{"title":"Accessing returned address","type":1,"pageTitle":"AlgoWCButton","url":"docs/AlgoComponents/AlgoWCButton#accessing-returned-address","content":"The returned address can be accessed several different ways. Setting the context prop to {this} and the returnTo prop to a state key (as string) will return the address directly to your parent component's state without the need for additional callback or event handler code. The address can also be accessed with Pipeline.address: componentDidMount() { this.interval = setInterval(() => this.setState({address: Pipeline.address}), 1000); } Copy or with an onChange handler: handleChange = (value) =>{ this.setState({myAddress: value}) } render(){ return <AlgoWCButton onChange={this.handleChange}/> } Copy "},{"title":"Use Example","type":1,"pageTitle":"AlgoWCButton","url":"docs/AlgoComponents/AlgoWCButton#use-example","content":"import React, { Component } from 'react';import { AlgoWCButton, Pipeline} from 'pipeline-ui'; class TestButton extends Component { constructor(props) { super(props); this.state = { Algaddress: \"\" } } myAlgoWallet = Pipeline.init(); render() { return <div> <AlgoWCButton context={this} returnTo={\"Algaddress\"} /> <h1>{this.state.Algaddress}</h1> </div> }} export default TestButton; Copy "},{"title":"Props","type":1,"pageTitle":"AlgoWCButton","url":"docs/AlgoComponents/AlgoWCButton#props","content":"Prop\tType\tDefault\tDescriptioncontext\treference returnTo\tstring\tempty string\tkey in state to return fetched address onChange\tfunction enables callback (see example above) "},{"title":"AsaList","type":0,"sectionRef":"#","url":"docs/AlgoComponents/AsaList","content":"","keywords":""},{"title":"Usage Example","type":1,"pageTitle":"AsaList","url":"docs/AlgoComponents/AsaList#usage-example","content":"import {Select, AsaList,Text} from 'pipeline-ui'<Text >Select a Verified ASA:</Text> <Select defaultValue={this.state.value} onChange={this.asaNumbChangeHandler} options={AsaList} /> Copy In the above example, the OnChange event calls the function asaNumbChangeHandler, which can be seen below: asaNumbChangeHandler = (event) => { this.setState({ asaNumb: event.value }); } Copy "},{"title":"Developer API (Sandbox)","type":0,"sectionRef":"#","url":"docs/api","content":"","keywords":""},{"title":"Complete Reference","type":1,"pageTitle":"Developer API (Sandbox)","url":"docs/api#complete-reference","content":"Below is an example of setting properties to fully customize the API. Note: setting Pipeline.main mainNet toggle will have no effect. Also, include only the base url and port numbers for the indexer and algod servers (i.e., do not include /v2/transactions/, etc. in url) Pipeline.EnableDeveloperAPI = true;Pipline.indexer = \"http://localhost:8980\";Pipeline.algod = \"http://localhost:4001\";Pipeline.token = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";Pipeline.devGenHash = \"sC3P7e2SdbqKJK0tbiCdK9tdSpbe6XeCGKdoNzmlj0E=\"Pipeline.devGenId = \"devnet-v1.0\" Copy "},{"title":"Blockie","type":0,"sectionRef":"#","url":"docs/Components/Blockie","content":"","keywords":""},{"title":"Usage Example","type":1,"pageTitle":"Blockie","url":"docs/Components/Blockie#usage-example","content":"Live Editor Result "},{"title":"Props","type":1,"pageTitle":"Blockie","url":"docs/Components/Blockie#props","content":"Prop\tType\tDefault\tDescriptionopts\tobject (optional)  "},{"title":"Flash","type":0,"sectionRef":"#","url":"docs/Components/Flash","content":"","keywords":""},{"title":"Usage example","type":1,"pageTitle":"Flash","url":"docs/Components/Flash#usage-example","content":"Live Editor Result "},{"title":"Accessibility","type":1,"pageTitle":"Flash","url":"docs/Components/Flash#accessibility","content":"Critical and warning banners have a role=\"alert\"All other banners have a role=\"status\"Banner containers have a tabindex=\"0\" and display a visible keyboard focus indicator. Banners use aria-describedby to describe their purpose to assistive technologies when they're announced or receive focus. All of the banner content is used for the aria-describedby. "},{"title":"Props","type":1,"pageTitle":"Flash","url":"docs/Components/Flash#props","content":"Prop\tType\tDefault\tDescriptionborder\tstring (optional)\t'1' borderRadius\tinteger (optional)\t1 p\tstring (optional)\t'3' variant\tenum (optional)\t'base'\tSets the colors of the background, text and links. Allowed values: 'base' 'success' 'warning' 'danger' 'info'. width\tstring (optional)\t'100%'\tSets width.  Flash uses COMMON, LAYOUT, POSITION, FLEXBOX, BORDERS groups of Styled System props. "},{"title":"AlgoSendButton","type":0,"sectionRef":"#","url":"docs/AlgoComponents/AlgoSendButton","content":"","keywords":""},{"title":"Accessing returned txID","type":1,"pageTitle":"AlgoSendButton","url":"docs/AlgoComponents/AlgoSendButton#accessing-returned-txid","content":"The returned transaction ID can be accessed several different ways. Setting the context prop to {this} and the returnTo prop to a state key (as string) will return the txID directly to your parent component's state without the need for additional callback or event handler code. The txID can also be accessed with Pipeline.txID: componentDidMount() { this.interval = setInterval(() => this.setState({txID: Pipeline.txID}), 1000); } Copy or with an onChange handler: handleChange = (value) =>{ this.setState({txID: value}) } render(){ return <AlgoSendButton onChange={this.handleChange} wallet={myAlgoWallet} index={this.state.index} recipient={this.state.recipient} amount={this.state.amount} note={this.state.note} /> } Copy "},{"title":"Use Example","type":1,"pageTitle":"AlgoSendButton","url":"docs/AlgoComponents/AlgoSendButton#use-example","content":"import {AlgoButton, AlgoSendButton, Pipeline} from 'pipeline-ui' const myAlgoWallet = Pipeline.init(); <AlgoSendButton index={this.state.index} recipient={this.state.recipient} amount={this.state.amount} note={this.state.note} wallet={myAlgoWallet} context={this} returnTo={\"txID\"} /> Copy "},{"title":"Props","type":1,"pageTitle":"AlgoSendButton","url":"docs/AlgoComponents/AlgoSendButton#props","content":"Prop\tType\tDefault\tDescriptionindex\tinteger\t0\tIf Algorand, must be 0. If ASA, must be numeric index value recipient\tstring Address of recipient amount\tinteger\t1\tamount to send in micro Algos note\tstring\t\"note\"\tAny data up to 1000 bytes. wallet\treference reference to an instance of Pipeline.init(); that is called ONCE when the app is initialized context\treference Recommended value: this returnTo\tstring string value of state key to return the transaction id onChange\tfunction Enables callback (see example above) "},{"title":"Button","type":0,"sectionRef":"#","url":"docs/Components/Button","content":"","keywords":""},{"title":"Usage Example","type":1,"pageTitle":"Button","url":"docs/Components/Button#usage-example","content":"Live Editor Result "},{"title":"Props","type":1,"pageTitle":"Button","url":"docs/Components/Button#props","content":"Prop\tType\tDefault\tDescriptionbg\tstring (optional)\t'silver' border\tstring (optional)\t'none' color\tstring (optional)\t'white' contrastColor\tstring (optional)\t'white'\tSets text color of button. fontFamily\tstring (optional)\t'sansSerif'\tSets font of button text. fontSize\tstring (optional)\t'inherit'\tSets font size. fontWeight\tinteger (optional)\t3\tSets font weight. height\tstring (optional)\t'3rem' icon\tstring (optional) Sets icon of button. icononly\tbool (optional)\tfalse\tSets padding on button with icon and no text iconpos\tenum (optional) Sets icon position on button. Allowed values: 'left' 'right'. lineHeight\tinteger (optional)\t1 mainColor\tstring (optional)\t'primary'\tSets background color of button. minWidth\tstring (optional)\t'3rem' position\tstring (optional)\t'relative' px\tinteger (optional)\t4 py\tinteger (optional)\t0 size\tenum (optional) Sets font and spacing size of button. Allowed values: 'small' 'medium' 'large'. theme\tobject (optional) Sets theme. size enum (optional) Sets font and spacing size of button Allowed values: 'small' 'medium' 'large' . theme object (optional) Sets theme Styled System Props Button uses COMMON, LAYOUT, POSITION, FLEXBOX, BORDERS groups of Styled System props. "},{"title":"Box","type":0,"sectionRef":"#","url":"docs/Components/Box","content":"","keywords":""},{"title":"Usage Example","type":1,"pageTitle":"Box","url":"docs/Components/Box#usage-example","content":"Live Editor Result "},{"title":"Margin and padding","type":1,"pageTitle":"Box","url":"docs/Components/Box#margin-and-padding","content":"The space function adds margin and padding props. The margin and padding props use a shorthand syntax, similar to Basscss, Tachyons, and Bootstrap. Margin props m marginmt margin-topmr margin-rightmb margin-bottomml margin-leftmx margin-left and margin-rightmy margin-top and margin-bottom Copy Padding props p paddingpt padding-toppr padding-rightpb padding-bottompl padding-leftpx padding-left and padding-rightpy padding-top and padding-bottom Copy Space Theming To set a consistent white-space scale, add a space array to your theme. Use numbers to set pixel values, or use strings for other CSS units such as rem. // theme.jsexport default { space: [0, 4, 8, 16, 32, 64, 128, 256, 512],}; Copy All spacing props accept numbers, strings, or arrays as values, where: Numbers between 0 and the last index of the space array are values from the space array defined in themeNumbers greater than the length of the spacearray are converted to pixelsString values can be used for any valid CSS value (e.g. 'auto' or '2em')Margin props accept negative values to set negative marginArrays can be used for responsive styles Copy Width The width function adds a single width prop for setting responsive width styles. The width prop accepts number, string, or array values, where: Numbers between 0 and 1 are converted to percentage based widths (e.g. 1/2 becomes '50%')Numbers greater than 1 are converted to pixelsStrings can be used for other CSS values (e.g. '50vw' or '30em')Arrays can be used for responsive styles Copy Responsive Styles All styled-system functions accept arrays as values to set styles responsively using a mobile-first approach. <Box width={[ 1, // 100% below the smallest breakpoint 1 / 2, // 50% from the next breakpoint and up 1 / 4, // 25% from the next breakpoint and up ]}/> Copy props# theme object (optional) Styled System Props Box uses COMMON, LAYOUT, POSITION, FLEXBOX, BORDERS groups of Styled System props. "},{"title":"Card","type":0,"sectionRef":"#","url":"docs/Components/Card","content":"","keywords":""},{"title":"Usage Example","type":1,"pageTitle":"Card","url":"docs/Components/Card#usage-example","content":"import {Card, Text, Icon, Button} from 'pipeline-ui' Copy Live Editor Result "},{"title":"Props","type":1,"pageTitle":"Card","url":"docs/Components/Card#props","content":"Prop\tType\tDefault\tDescriptionbg\tstring (optional)\t'white' border\tinteger (optional)\t1 borderColor\tstring (optional)\t'light-gray' boxShadow\tinteger (optional)\t2 p\tinteger (optional)\t4 position\tstring (optional)\t'relative' theme\tobject (optional)   Box uses COMMON, LAYOUT, POSITION, FLEXBOX, BORDERS groups of Styled System props. "},{"title":"Form","type":0,"sectionRef":"#","url":"docs/Components/Form","content":"","keywords":""},{"title":"Usage Example","type":1,"pageTitle":"Form","url":"docs/Components/Form#usage-example","content":"(to view component preview, scroll to bottom of page) import { Box, Form, Input, Select, Field, Button, Text, Checkbox, Radio} from \"pipeline-ui\"; Copy Live Editor Result "},{"title":"Props","type":1,"pageTitle":"Form","url":"docs/Components/Form#props","content":"Prop\tType\tDefault\tDescriptionvalidated\tbool (optional)\tfalse\tShows the input validation styles when true by adding the `.was-validated` class to the form element.  Form uses COMMON, LAYOUT, POSITION, FLEXBOX, BORDERS groups of Styled System props. "},{"title":"Flex","type":0,"sectionRef":"#","url":"docs/Components/Flex","content":"","keywords":""},{"title":"Usage Example","type":1,"pageTitle":"Flex","url":"docs/Components/Flex#usage-example","content":"Live Editor Result "},{"title":"Props","type":1,"pageTitle":"Flex","url":"docs/Components/Flex#props","content":"Prop\tType\tDefault\tDescriptiondisplay\tstring (optional)\t'flex'\t  Flex uses COMMON, LAYOUT, POSITION, FLEXBOX, BORDERS groups of Styled System props. "},{"title":"BaseStyles","type":0,"sectionRef":"#","url":"docs/Components/BaseStyles","content":"BaseStyles In order to set basic color, font-sizes, font-family, line-heights, style resets via normalize across your project, you will need to establish Pipeline's base styles for your app by wrapping all of your components in <BaseStyles>: import {BaseStyles, Box, Heading} from 'pipeline-ui'const App = (props) => { return ( <BaseStyles> <Box m={4}> <Heading mb={2}>Hello, world!</Heading> <p>These elements will have Pipeline's base styles applied to them.</p> </Box> </BaseStyles> )} Copy","keywords":""},{"title":"Field","type":0,"sectionRef":"#","url":"docs/Components/Field","content":"","keywords":""},{"title":"Usage Example","type":1,"pageTitle":"Field","url":"docs/Components/Field#usage-example","content":"<Field label=\"Note\"> <Input type=\"text\" required={true} placeholder=\"your note goes here\" /></Field> Copy "},{"title":"Props","type":1,"pageTitle":"Field","url":"docs/Components/Field#props","content":"Prop\tType\tDefault\tDescriptionchildren\telement (required) label\tstring (required)   Field uses COMMON, LAYOUT, POSITION, FLEXBOX, BORDERS groups of Styled System props. "},{"title":"Checkbox","type":0,"sectionRef":"#","url":"docs/Components/Checkbox","content":"","keywords":""},{"title":"Usage Example","type":1,"pageTitle":"Checkbox","url":"docs/Components/Checkbox#usage-example","content":"Live Editor Result "},{"title":"Props","type":1,"pageTitle":"Checkbox","url":"docs/Components/Checkbox#props","content":"Prop\tType\tDefault\tDescriptioncolor\tstring (optional)\t'primary' label\tstring (optional) theme\tobject (optional) Sets theme.  Checkbox uses COMMON, LAYOUT, POSITION, FLEXBOX, BORDERS groups of Styled System props. "},{"title":"Heading","type":0,"sectionRef":"#","url":"docs/Components/Heading","content":"","keywords":""},{"title":"Usage Example","type":1,"pageTitle":"Heading","url":"docs/Components/Heading#usage-example","content":"Live Editor Result "},{"title":"Props","type":1,"pageTitle":"Heading","url":"docs/Components/Heading#props","content":"Prop\tType\tDefault\tDescriptionas\tstring (optional)\t'h2' fontSize\t(optional)   Heading uses COMMON, TYPOGRAPHY groups of Styled System props. "},{"title":"Image","type":0,"sectionRef":"#","url":"docs/Components/Image","content":"","keywords":""},{"title":"Usage Example","type":1,"pageTitle":"Image","url":"docs/Components/Image#usage-example","content":"Live Editor Result "},{"title":"Props","type":1,"pageTitle":"Image","url":"docs/Components/Image#props","content":"Prop\tType\tDefault\tDescriptionalt\tstring (optional) Sets alt attribute on image for accessibility. height\tstring (optional)\t'auto' maxWidth\tstring (optional)\t'100%' src\tstring (required) Sets the src attribute of the img element. theme\tobject (optional) Sets theme.  Image uses COMMON, LAYOUT, POSITION, FLEXBOX, BORDERS groups of Styled System props. "},{"title":"Input","type":0,"sectionRef":"#","url":"docs/Components/Input","content":"","keywords":""},{"title":"Usage Example","type":1,"pageTitle":"Input","url":"docs/Components/Input#usage-example","content":"Live Editor Result "},{"title":"Props","type":1,"pageTitle":"Input","url":"docs/Components/Input#props","content":"Prop\tType\tDefault\tDescriptionbg\tstring (optional)\t'background' border\tinteger (optional)\t1 borderColor\tstring (optional)\t'moon-gray' borderRadius\tinteger (optional)\t1 boxShadow\tinteger (optional)\t1 color\tstring (optional)\t'text' fontSize\tstring (optional)\t'1rem' height\tstring (optional)\t'3rem' lineHeight\tstring (optional)\t'initial' p\tinteger (optional)\t3 theme\tobject (optional)   Input uses COMMON, LAYOUT, POSITION, FLEXBOX, BORDERS groups of Styled System props. "},{"title":"Pipeline Icons","type":0,"sectionRef":"#","url":"docs/Components/Icon","content":"","keywords":""},{"title":"Import in app","type":1,"pageTitle":"Pipeline Icons","url":"docs/Components/Icon#import-in-app","content":"import { Icon } from '@pipeline-ui'; // imports all icons - bad for bundle sizeimport { Algo } from '@pipeline-ui/icons'; // import single token iconimport { MoneyOff } from '@pipeline-ui/icons'; // import single material design icon Copy "},{"title":"Examples","type":1,"pageTitle":"Pipeline Icons","url":"docs/Components/Icon#examples","content":"   import {Algo, Btc} from '@pipeline-ui/icons';import {Icon} from 'pipeline-ui';<> <Icon color=\"red\" name=\"MoneyOff\" size=\"80\" /> <Algo color=\"black\" size=\"80\" /> <Btc color=\"gold\" size=\"80\" /></> Copy Live Editor Result Icon uses COMMON, LAYOUT, POSITION, FLEXBOX, BORDERS groups of Styled System props. "},{"title":"Loader","type":0,"sectionRef":"#","url":"docs/Components/Loader","content":"","keywords":""},{"title":"Usage Example","type":1,"pageTitle":"Loader","url":"docs/Components/Loader#usage-example","content":"Live Editor Result "},{"title":"Props","type":1,"pageTitle":"Loader","url":"docs/Components/Loader#props","content":"Prop\tType\tDefault\tDescriptionbg\tstring (optional)\t'transparent' color\tstring (optional)\t'primary' size\tstring (optional)\t'1rem'\t  Loader uses COMMON, LAYOUT, POSITION, FLEXBOX, BORDERS groups of Styled System props. "},{"title":"Link","type":0,"sectionRef":"#","url":"docs/Components/Link","content":"","keywords":""},{"title":"Usage Example","type":1,"pageTitle":"Link","url":"docs/Components/Link#usage-example","content":"Live Editor Result "},{"title":"Props","type":1,"pageTitle":"Link","url":"docs/Components/Link#props","content":"Prop\tType\tDefault\tDescriptionactiveColor\tstring (optional)\t'primary-dark' color\tstring (optional)\t'primary' fontSize\tinteger (optional)\t1 fontWeight\tinteger (optional)\t3 hoverColor\tstring (optional)\t'primary-light'\t  Link uses COMMON, TYPOGRAPHY groups of Styled System props. "},{"title":"PipelineShell","type":0,"sectionRef":"#","url":"docs/Components/PipelineShell","content":"","keywords":""},{"title":"Usage Example","type":1,"pageTitle":"PipelineShell","url":"docs/Components/PipelineShell#usage-example","content":"Live Editor Result "},{"title":"Pill","type":0,"sectionRef":"#","url":"docs/Components/Pill","content":"","keywords":""},{"title":"Usage Example","type":1,"pageTitle":"Pill","url":"docs/Components/Pill#usage-example","content":"Live Editor Result "},{"title":"Props","type":1,"pageTitle":"Pill","url":"docs/Components/Pill#props","content":"Prop\tType\tDefault\tDescriptionalignItems\tstring (optional)\t'center' bg\tstring (optional)\t'#FFF' borderRadius\tinteger (optional)\t3 color\tstring (optional)\t'dark-gray' display\tobject (optional)\t'inline-flex' fontSize\tinteger (optional)\t1 fontWeight\tinteger (optional)\t2 height\tstring (optional)\t'2rem' lineHeight\tstring (optional)\t'solid' px\tinteger (optional)\t3 py\tinteger (optional)\t1\t  Pill uses COMMON, TYPOGRAPHY groups of Styled System props. "},{"title":"Progress","type":0,"sectionRef":"#","url":"docs/Components/Progress","content":"","keywords":""},{"title":"Usage Example","type":1,"pageTitle":"Progress","url":"docs/Components/Progress#usage-example","content":"Live Editor Result "},{"title":"Radio","type":0,"sectionRef":"#","url":"docs/Components/Radio","content":"","keywords":""},{"title":"Usage Example","type":1,"pageTitle":"Radio","url":"docs/Components/Radio#usage-example","content":"Live Editor Result "},{"title":"Props","type":1,"pageTitle":"Radio","url":"docs/Components/Radio#props","content":"Prop\tType\tDefault\tDescriptioncolor\tstring (optional)\t'primary' label\tstring (optional) theme\tobject (optional)   Radio uses COMMON, LAYOUT, POSITION, FLEXBOX, BORDERS groups of Styled System props. "},{"title":"Modal","type":0,"sectionRef":"#","url":"docs/Components/Modal","content":"","keywords":""},{"title":"Usage Example","type":1,"pageTitle":"Modal","url":"docs/Components/Modal#usage-example","content":"Live Editor Result "},{"title":"Props","type":1,"pageTitle":"Modal","url":"docs/Components/Modal#props","content":"Prop\tType\tDefault\tDescriptionisOpen\tbool (optional)\tfalse\tShows the content of the Modal when true. "},{"title":"QR","type":0,"sectionRef":"#","url":"docs/Components/QR","content":"","keywords":""},{"title":"Usage Example","type":1,"pageTitle":"QR","url":"docs/Components/QR#usage-example","content":"Live Editor Result "},{"title":"Props","type":1,"pageTitle":"QR","url":"docs/Components/QR#props","content":"Prop\tType\tDefault\tDescriptionbgColor\tstring (optional)\t'#FFFFFF'\tSets the background color fgColor\tstring (optional)\t'#000000'\tSets the foreground color includeMargin\tbool (optional)\tfalse\tAdds margin around the QR code level\tenum (optional)\t'L'\tSets the amount of error correction. Allowed values: 'L' 'M' 'Q' 'H'. renderAs\tenum (optional)\t'svg'\tChanges the element that contains the QR code. Allowed values: 'canvas' 'svg'. size\tinteger (optional)\t128\tSets the height and width in pixels value\tstring (required) Sets the value of the QR code "},{"title":"Select","type":0,"sectionRef":"#","url":"docs/Components/Select","content":"","keywords":""},{"title":"Usage Example","type":1,"pageTitle":"Select","url":"docs/Components/Select#usage-example","content":"import {Select, AsaList} from 'pipeline-ui' Copy Live Editor Result The value of the options prop is an array of objects: const options = [ { value: '1', label: 'Algorand' }, { value: '2', label: 'Ethereum' }, { value: '3', label: 'Bitcoin' }] Copy "},{"title":"Text","type":0,"sectionRef":"#","url":"docs/Components/Text","content":"","keywords":""},{"title":"Usage Example","type":1,"pageTitle":"Text","url":"docs/Components/Text#usage-example","content":"Live Editor Result "},{"title":"Props","type":1,"pageTitle":"Text","url":"docs/Components/Text#props","content":"Prop\tType\tDefault\tDescriptionfontSize\tinteger (optional)\t2 fontWeight\tinteger (optional)\t2 lineHeight\tstring (optional)\t'copy' theme\tobject (optional)   Text uses COMMON, TYPOGRAHY groups of Styed System props. "},{"title":"Table","type":0,"sectionRef":"#","url":"docs/Components/Table","content":"","keywords":""},{"title":"Usage Example","type":1,"pageTitle":"Table","url":"docs/Components/Table#usage-example","content":"Live Editor Result "},{"title":"Props","type":1,"pageTitle":"Table","url":"docs/Components/Table#props","content":"Prop\tType\tDefault\tDescriptionborder\tinteger (optional)\t1 borderColor\tstring (optional)\t'grey' boxShadow\tinteger (optional)\t1 color\tstring (optional)\t'dark-gray' fontFamily\tstring (optional)\t'sansSerif' fontSize\tinteger (optional)\t1 fontWeight\tinteger (optional)\t2 theme\tobject (optional)   Table uses COMMON, LAYOUT, POSITION, FLEXBOX, BORDERS groups of Styled System props. "},{"title":"Pipeline Connect","type":0,"sectionRef":"#","url":"docs/Demos/connect","content":"Pipeline Connect","keywords":""},{"title":"Slider","type":0,"sectionRef":"#","url":"docs/Components/Slider","content":"","keywords":""},{"title":"Usage Example","type":1,"pageTitle":"Slider","url":"docs/Components/Slider#usage-example","content":"Live Editor Result "},{"title":"Props","type":1,"pageTitle":"Slider","url":"docs/Components/Slider#props","content":"Prop\tType\tDefault\tDescriptionaria-label\tstring (optional)\t'range slider'\t "},{"title":"Textarea","type":0,"sectionRef":"#","url":"docs/Components/Textarea","content":"","keywords":""},{"title":"Usage Example","type":1,"pageTitle":"Textarea","url":"docs/Components/Textarea#usage-example","content":"Live Editor Result "},{"title":"Props","type":1,"pageTitle":"Textarea","url":"docs/Components/Textarea#props","content":"Prop\tType\tDefault\tDescriptionheight\tstring (optional)\t'auto' lineHeight\tstring (optional)\t'copy' theme\tobject (optional)   Textarea uses COMMON, LAYOUT, POSITION, FLEXBOX, BORDERS groups of Styled System props. "},{"title":"ToastMessage","type":0,"sectionRef":"#","url":"docs/Components/ToastMessage","content":"","keywords":""},{"title":"Props","type":1,"pageTitle":"ToastMessage","url":"docs/Components/ToastMessage#props","content":"Prop\tType\tDefault\tDescriptionactionHref\tstring (optional)\t''\tSets URL for button. actionText\tstring (optional)\t''\tSets text for button. closeElem\tbool (optional)\tfalse\tAllows ToastMessage to be closed by user colorTheme\tenum (optional)\t'light'\tSets background and text color. Allowed values: 'light' 'dark'. icon\tstring (optional)\t''\tSets icon to display message\tstring (optional)\t'Write update here [Required]'\tSets primary message text secondaryMessage\tstring (optional)\t''\tSets secondary message text variant\tenum (optional)\t'default'\tSets type of ToastMessage to display. Allowed values: 'default' 'success' 'failure' 'processing'. "},{"title":"Pipeline Express","type":0,"sectionRef":"#","url":"docs/Demos/express","content":"Pipeline Express","keywords":""},{"title":"CSS Class Names and Usage","type":0,"sectionRef":"#","url":"docs/CSS/cssclasses","content":"","keywords":""},{"title":"Set a Component's class Name","type":1,"pageTitle":"CSS Class Names and Usage","url":"docs/CSS/cssclasses#set-a-components-class-name","content":"<Button className=\"myNewButton\">Click Me!</Button> Copy "},{"title":"Stylesheet Examples","type":1,"pageTitle":"CSS Class Names and Usage","url":"docs/CSS/cssclasses#stylesheet-examples","content":"Due to the nested complex nature of many React components, we recommend using CSS selector * and child combinator >. "},{"title":"Select style on hover","type":1,"pageTitle":"CSS Class Names and Usage","url":"docs/CSS/cssclasses#select-style-on-hover","content":"div[class*=pipeline-select] > div:hover{ background-color: rgba(0, 255, 21, 0.514)!important; border-color: #ff0800!important;} Copy "},{"title":"button element style with class SolidButton and exclude Algo Buttons","type":1,"pageTitle":"CSS Class Names and Usage","url":"docs/CSS/cssclasses#button-element-style-with-class-solidbutton-and-exclude-algo-buttons","content":"button:not([class*=algo-btn-solid]):not([class*=AlgoSendButton]), button [class*=SolidButton] { background-color: #1c1ce1!important; color: #fff!important; white-space: pre-wrap; text-decoration: none; margin-top: .5rem!important} Copy "},{"title":"className Reference","type":1,"pageTitle":"CSS Class Names and Usage","url":"docs/CSS/cssclasses#classname-reference","content":"We have also attached classes to each Pipeline-UI component for user convenience, and will be providing the reference sheet soon. (coming soon) Component\tCSS ClassComponent1\tcomponent-class "},{"title":"Icons Database","type":0,"sectionRef":"#","url":"docs/Demos/icons","content":"Icons Database A searchable database of all crypto and material icons.","keywords":""},{"title":"Pipeline Express","type":0,"sectionRef":"#","url":"docs/express","content":"","keywords":""},{"title":"Getting Started","type":1,"pageTitle":"Pipeline Express","url":"docs/express#getting-started","content":"After creating and installing the basics for a new React App, run: cd my-new-appnpm install pipeline-express-react Copy In your App.js file, add the following code below your existing import declarations: import { AlgoButton, AlgoSendButton, Pipeline} from 'pipeline-express-react' Copy "},{"title":"Example App","type":1,"pageTitle":"Pipeline Express","url":"docs/express#example-app","content":" "},{"title":"Component Demo","type":0,"sectionRef":"#","url":"docs/Demos/demo","content":"","keywords":""},{"title":"Testing library modifications","type":1,"pageTitle":"Component Demo","url":"docs/Demos/demo#testing-library-modifications","content":"To test any modifications you wish to make to the library, you must delete the demo's node-modules folder and re-install. Alternatively, you can replace the demo's package.json tgz pipeline-ui path with \"file:../\" and update the version code in the pipeline-ui package.json. tip To view changes to the library in your own project, add the dependency (with latest version number) \"pipeline-ui\": \"file:./pipeline-ui-0.1.6.tgz\" to its package.json file, and copy the tgz file to your project root directory. "},{"title":"Transaction Demo","type":0,"sectionRef":"#","url":"docs/Demos/transaction","content":"Transaction Demo This demo was used in the creation of Pipeline-UI Algorand components. It is fully functional and allows you to send and view transactions.","keywords":""},{"title":"ToastMessage Provider","type":0,"sectionRef":"#","url":"docs/Components/ToastMessageProvider","content":"","keywords":""},{"title":"Usage Example","type":1,"pageTitle":"ToastMessage Provider","url":"docs/Components/ToastMessageProvider#usage-example","content":"<ToastMessage.Provider ref={node => (window.toastProvider = node)} /><Button mb={3} onClick={e => window.toastProvider.addMessage(\"Processing transaction...\", { secondaryMessage: \"Checking progress on Algo Explorer\", actionHref: \"https://algoexplorer.io/\", actionText: \"Check\", variant: \"processing\" }) }>Transaction Progress </Button> Copy "},{"title":"Frequently asked questions","type":0,"sectionRef":"#","url":"docs/faq","content":"","keywords":""},{"title":"Do I need to add algosdk and/or @randlabs/myalgo-connect as dependencies to my apps?","type":1,"pageTitle":"Frequently asked questions","url":"docs/faq#do-i-need-to-add-algosdk-andor-randlabsmyalgo-connect-as-dependencies-to-my-apps","content":"No! MyAlgo Connect is automatically imported when you install Pipeline-ui, and its functions are hard-coded into Pipeline UI components. After transactions are signed by MyAlgo Connect, they are then sent directly to the Algorand blockchain via AlgoExplorer (which currently does not require an API key). "},{"title":"Can I customize Pipeline UI components?","type":1,"pageTitle":"Frequently asked questions","url":"docs/faq#can-i-customize-pipeline-ui-components","content":"To a certain degree. Part of the function of Pipeline UI is to provide standardized components that are readily recognizeable. For most components, you can easily change certain props like size and color themes. Algorand-specific components have hard-coded onClick event handlers that you cannot change. On the other hand, if you really want to, you can overide default styles with inline css, stylesheets or library modification.  "},{"title":"Can I use Pipeline UI to create Algorand widgets for my website?","type":1,"pageTitle":"Frequently asked questions","url":"docs/faq#can-i-use-pipeline-ui-to-create-algorand-widgets-for-my-website","content":"Yes! Pipeline expedites and simplifies the process of incorporating Algorand into existing web frameworks. After building your React app, simply deploy it with Vercel, FireBase or AWS and place its URL in an iFrame:  <iframe src=\"pipeline-express-react.vercel.app\" height=\"550\" width=\"350\" ></iframe> Copy "},{"title":"Does Pipeline UI give me out-of-the-box Algorand transaction capability?","type":1,"pageTitle":"Frequently asked questions","url":"docs/faq#does-pipeline-ui-give-me-out-of-the-box-algorand-transaction-capability","content":"Yes! "},{"title":"I don't need standard components. Is there a lite version of Pipeline?","type":1,"pageTitle":"Frequently asked questions","url":"docs/faq#i-dont-need-standard-components-is-there-a-lite-version-of-pipeline","content":"Yes! We created Pipeliness Express to get your React Apps connect to Algorand in seconds! For more info, check out:Pipeline Express on Github  "},{"title":"CSS & Style Guide","type":0,"sectionRef":"#","url":"docs/CSS/css","content":"","keywords":""},{"title":"Inline CSS & React","type":1,"pageTitle":"CSS & Style Guide","url":"docs/CSS/css#inline-css--react","content":"Changing CSS properties inside React component JSX tags is at times slightly different from conventional CSS:  <Button borderRadius=\"20\" /> Copy Note: CSS can only be used like this if the CSS property is also a \"prop\" of the React component. If it is not, it may be incorporated by using the style keyword like this: <Button style={{borderRadius: 20}}/> Copy In JSX, curly braces are used to both specify that the value is JavaScript, and to create a JavaScript object. In addition, dashes are not permitted in object names (the keys that come before colons), so the CSS property is camelCased. "},{"title":"CSS Stylesheets and React","type":1,"pageTitle":"CSS & Style Guide","url":"docs/CSS/css#css-stylesheets-and-react","content":"To use a stylesheet in React, the stylesheet must first be imported: import React, { Component } from 'react';import { Button } from 'pipeline-ui'import styles from './custom.css'; class App extends Component { render() { // You can use them as regular CSS styles return <Button className={styles.button} />; }} Copy "},{"title":"Why CSS is not recommended","type":1,"pageTitle":"CSS & Style Guide","url":"docs/CSS/css#why-css-is-not-recommended","content":"The below example graphically illustrates why css is not the preferred way to change the style of a Pipeline-UI component:  <Button style={{ backgroundColor: 'red', border: 'solid red', borderRadius: 20, }} /> Copy In the example, our CSS value for backgroundColor is having no visible effect on the Pipeline-Ui component, since the component's background color is actually set by its prop mainColor. We can easily change the background color by setting its non-CSS prop: Live Editor Result "},{"title":"Videos","type":0,"sectionRef":"#","url":"docs/videos","content":"","keywords":""},{"title":"Fastest dApp Deployment","type":1,"pageTitle":"Videos","url":"docs/videos#fastest-dapp-deployment","content":"Headline intern novice coders race to see who can modify and deploy a Pipeline Express dApp (decentralized app) from GitHub to Vercel in under 3 minutes.  "},{"title":"The Lab","type":0,"sectionRef":"#","url":"docs/lab","content":"","keywords":""},{"title":"AlgoPost","type":1,"pageTitle":"The Lab","url":"docs/lab#algopost","content":"An experimental framework to store tiny images on the Algorand Blockchain. Images are converted to 30 x 30 8 bit color pixel arrays (900 bytes) for storing in the Algorand blockchain \"note\" field. This is a cornerstone of our future planned Algorand-based resilient social media platform that will completely negate the need for 3rd party centralized databases and servers. Next on the list: using AI to upscale the tiny images client-side (i.e., with 255 principle component expansion filters).  "},{"title":"Getting Started","type":0,"sectionRef":"#","url":"docs/getting-started-B","content":"","keywords":""},{"title":"Install the library:","type":1,"pageTitle":"Getting Started","url":"docs/getting-started-B#install-the-library","content":"cd myNewAppnpm install pipeline-ui Copy "},{"title":"Import components into your React project:","type":1,"pageTitle":"Getting Started","url":"docs/getting-started-B#import-components-into-your-react-project","content":"import { AlgoButton, AlgoSendButton, Pipeline} from 'pipeline-ui'; Copy caution All Pipeline UI libraries and demos execute transactions on the Algorand MainNet by default. To send transactions on the TestNet, check out SwitchNet Component "},{"title":"Modifying the library:","type":1,"pageTitle":"Getting Started","url":"docs/getting-started-B#modifying-the-library","content":"If you wish to download and modify the library components via source code, run the following code to save it to your user root directory and install its dependencies: git clone https://github.com/headline-design/pipeline-uicd pipeline-uinpm install Copy You may then edit the components via the index.js file found inside each component folder in the parent folder /src. After saving changes, you must then run the following code from the pipeline-ui parent folder: npm run buildnpm pack Copy  "},{"title":"Theme","type":0,"sectionRef":"#","url":"docs/Components/Theme","content":"","keywords":""},{"title":"Strategies","type":1,"pageTitle":"Theme","url":"docs/Components/Theme#strategies","content":"You can override the entire theme for an entire tree of components using the ThemeProvider from styled-components: import {Box, Button, Text, theme} from 'pipeline-ui'import {ThemeProvider} from 'styled-components'// a theme with custom spacing and font sizesconst customTheme = { ...theme, space: [0, 8, 16, 32, 64], fontSizes: [10, 12, 16, 24, 48]}// overridecustomTheme.colors.black = '#111'export default () => ( <ThemeProvider theme={customTheme}> <Box color='black' p={4}> <Text fontSize={4}>Hello, world!</Text> </Box> </ThemeProvider>) Copy Option B: You can merge the pipeline theme with your custom theme using Object.assign: import {theme} from 'pipeline-ui';import { ThemeProvider } from 'styled-components';const customTheme = { space: [0, 8, 16, 32, 64], fontSizes: [10, 12, 16, 24, 48], colors: { ...theme.colors, black: '#111' }};const App = (props) => { return ( <div> <ThemeProvider theme={Object.assign({}, theme, customTheme)}> // matching keys in customTheme will override keys in the pipeline theme <App /> </ThemeProvider> </div> )} Copy Option 3: You can theme individual components by passing the theme prop directly: import {Text} from 'pipeline-ui'const customTheme = { colors: { magenta: '#f0f' }}export default () => ( <Text theme={customTheme} color='magenta'>Hi, I'm magenta!</Text>) Copy "},{"title":"Why Pipeline?","type":0,"sectionRef":"#","url":"docs/start","content":"","keywords":""},{"title":"What is Pipeline UI?","type":1,"pageTitle":"Why Pipeline?","url":"docs/start#what-is-pipeline-ui","content":"Pipeline UI is a ready-to-use library to rapidly add standardized Algorand functional components to your React apps.  "},{"title":"What are the differences with other blockchain libraries?","type":1,"pageTitle":"Why Pipeline?","url":"docs/start#what-are-the-differences-with-other-blockchain-libraries","content":"Pipeline UI reduces the amount of time it takes to integrate Algorand features into existing websites. "},{"title":"Features:","type":1,"pageTitle":"Why Pipeline?","url":"docs/start##","content":"Standardized design theming Hard-coded transaction and blockchain API components Built in QR code generators ...and many other features in the works! "},{"title":"Pipeline Ecosystem","type":1,"pageTitle":"Why Pipeline?","url":"docs/start#pipeline-ecosystem","content":"The Pipeline project is a bridge to blockchain for web developers of all levels of coding experience, creating an ecosystem of tools for everyone from html bloggers to advanced JavaScript coders! Pipeline Express Beginner 2 Algo Buttons Sign Transactions Send Transactions Pipeline UI Intermediate 5 Algo Components Sign Transactions Send Transactions QR Code Address Last 5 Transactions ASA List Standard Components Pipeline Class Advanced 3 Algo Methods Sign Transactions Send Transactions Check Balance Pure JavaScript "},{"title":"Basics","type":0,"sectionRef":"#","url":"docs/Solutions/common","content":"","keywords":""},{"title":"How do I make a blank React app?","type":1,"pageTitle":"Basics","url":"docs/Solutions/common#how-do-i-make-a-blank-react-app","content":"In command prompt, enter: npx create-react-app myApp Copy Running this command generates a new folder called \"myApp\" (or whichever custom name you specify). Inside this folder you will find several pre-configured files. The primary file that you will be working with is App.js that is found in the src folder.  "},{"title":"setState or this is not defined","type":1,"pageTitle":"Basics","url":"docs/Solutions/common#setstate-or-this-is-not-defined","content":"tip Make sure that your app is written as a class rather than as a function if you are using the context and returnTo props (used by AlgoButton and AlgoSendButton). If you want to write your app as a function, used the onChange prop instead, along with a callback/handler function. Your code in App.js should look like this (when writing a React app as a class): import React, {Component} from 'react'; class App extends Component{ constructor(props) { super(props); this.state = { myValue: \"\", //your values go here }; } //your function and lifecycle code goes here render(){ return ( //your jsx code goes between the <div> tags below: <div> </div> ) }} export default App; Copy "},{"title":"How to trigger other actions after connecting to MyAlgo or sending a transaction","type":1,"pageTitle":"Basics","url":"docs/Solutions/common#how-to-trigger-other-actions-after-connecting-to-myalgo-or-sending-a-transaction","content":"Add the following code just above the render() call:  componentDidUpdate(_prevProps, prevState) { if (prevState.address !== this.state.address){ // note: address can be replaced with any state key //do something } } Copy In order to avoid an inifinite loop and browser crashing, setState (or functions that setState) should only be called in componentDidUpdate in a conditional block. "},{"title":"Pipeline Class","type":0,"sectionRef":"#","url":"docs/pipeline","content":"","keywords":""},{"title":"Use Example","type":1,"pageTitle":"Pipeline Class","url":"docs/pipeline#use-example","content":" warning The above example will send 1 micro Algo to the Headline Dev Team test account. We recommend changing the value const recipient (currently on line 5) to your preferred testing addressing before sending a transaction. "},{"title":"Fields/Properties","type":1,"pageTitle":"Pipeline Class","url":"docs/pipeline#fieldsproperties","content":"The Pipeline class has several fields or properties that developers can use to change several settings for Pipeline. Pipeline.main = false; //switch to testNet Copy Field\tDefault\tOptions\tEffectPipeline.pipeConnector\tstring \"myAlgoWallet\"\t\"myAlgoWallet\" or currently any other string\tSwitch between MyAlgo and WalletConnect wallets Pipeline.main\ttrue\tBoolean\tSwitch between mainNet and testNet "},{"title":"Methods","type":1,"pageTitle":"Pipeline Class","url":"docs/pipeline#methods","content":"Method\tReturns\tDescriptionPipeline.init()\tnew instance of MyAlgo\tMust be called once before connect or send methods Pipeline.balance()\tstring (balance + \"Algos\")\tTakes input string address. Pipeline.init not neccesary for use. Pipeline.connect()\tstring (address)\tGenerates pop-up to sign in. Must be called before Pipeline.send Pipeline.send()\tstring (transaction id) Can only be called after Pipeline.init and Pipeline.connect. "},{"title":"Arguments","type":1,"pageTitle":"Pipeline Class","url":"docs/pipeline#arguments","content":""},{"title":"Pipeline.balance()","type":1,"pageTitle":"Pipeline Class","url":"docs/pipeline#pipelinebalance","content":"Argument\tType\tDescriptionaddress\tstring\tAlgorand address "},{"title":"Pipeline.connect()","type":1,"pageTitle":"Pipeline Class","url":"docs/pipeline#pipelineconnect","content":"Argument\tType\tDescriptionwallet\treference\tinstance of Pipeline.init() that is called once in app "},{"title":"Pipeline.send()","type":1,"pageTitle":"Pipeline Class","url":"docs/pipeline#pipelinesend","content":"Argument\tType\tDescriptionaddress\tstring\trecipient's Algorand address amt\tinteger\tamount to send in microAlgos myNote\tstring\tnote sendingAddress\tstring\tsenders's Algorand address wallet\treference\tinstance of Pipeline.init() that is called once in app index\tinteger\t0 = Algorand, otherwise asset index number "}]